// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sig.App.Backend.DbModel;

#nullable disable

namespace Sig.App.Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250501210142_SubscriptionIsExpired")]
    partial class SubscriptionIsExpired
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AddingFundTransactionManuallyAddingFundTransaction", b =>
                {
                    b.Property<long>("AffectedNegativeFundTransactionsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ManuallNegativeFundTransactionsId")
                        .HasColumnType("bigint");

                    b.HasKey("AffectedNegativeFundTransactionsId", "ManuallNegativeFundTransactionsId");

                    b.HasIndex("ManuallNegativeFundTransactionsId");

                    b.ToTable("AddingFundTransactionManuallyAddingFundTransaction");
                });

            modelBuilder.Entity("AddingFundTransactionPaymentTransaction", b =>
                {
                    b.Property<long>("TransactionsId")
                        .HasColumnType("bigint");

                    b.Property<long>("TransactionsId1")
                        .HasColumnType("bigint");

                    b.HasKey("TransactionsId", "TransactionsId1");

                    b.HasIndex("TransactionsId1");

                    b.ToTable("AddingFundTransactionPaymentTransaction");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xml")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.BackgroundJobs.AddingFundToCardRun", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Moments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AddingFundToCardRuns");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Beneficiaries.Beneficiary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BeneficiaryTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CardId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ID1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ID2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUnsubscribeToReceipt")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SortOrder")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiaryTypeId");

                    b.HasIndex("CardId")
                        .IsUnique()
                        .HasFilter("[CardId] IS NOT NULL");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Beneficiaries");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Beneficiary");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Beneficiaries.BeneficiaryType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Keys")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("BeneficiaryTypes");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Beneficiaries.PaymentFund", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BeneficiaryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiaryId");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("PaymentFunds");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.BlacklistedEmail", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AddedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("EmailSentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FirstAddedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastAddedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastReason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("BlacklistedEmails");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.BudgetAllowances.BudgetAllowance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AvailableFund")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("OriginalFund")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("SubscriptionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("BudgetAllowances");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Cards.Card", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<long>("ProgramCardId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Cards.Fund", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("CardId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("Funds");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.CashRegisters.CashRegister", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<long>("MarketId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.ToTable("CashRegisters");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.CashRegisters.CashRegisterMarketGroup", b =>
                {
                    b.Property<long>("CashRegisterId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("CashRegisterId", "MarketGroupId");

                    b.HasIndex("MarketGroupId");

                    b.ToTable("CashRegisterMarketGroups");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.MarketGroups.MarketGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("MarketGroups");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.MarketGroups.MarketGroupMarket", b =>
                {
                    b.Property<long>("MarketId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("MarketId", "MarketGroupId");

                    b.HasIndex("MarketGroupId");

                    b.ToTable("MarketGroupMarkets");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Markets.Market", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Organizations.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Organizations.OrganizationMarket", b =>
                {
                    b.Property<long>("MarketId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("MarketId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationMarkets");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.ProductGroups.ProductGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderOfAppearance")
                        .HasColumnType("int");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Profiles.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Projects.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("AdministrationSubscriptionsOffPlatform")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowOrganizationsAssignCards")
                        .HasColumnType("bit");

                    b.Property<bool>("BeneficiariesAreAnonymous")
                        .HasColumnType("bit");

                    b.Property<string>("CardImageFileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Projects.ProjectMarket", b =>
                {
                    b.Property<long>("MarketId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("MarketId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMarkets");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Subscriptions.Subscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FundsExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFundsAccumulable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubscriptionPaymentBasedCardUsage")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxNumberOfPayments")
                        .HasColumnType("int");

                    b.Property<int>("MonthlyPaymentMoment")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberDaysUntilFundsExpire")
                        .HasColumnType("int");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TriggerFundExpiration")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Subscriptions.SubscriptionBeneficiary", b =>
                {
                    b.Property<long>("BeneficiaryId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubscriptionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BeneficiaryTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BudgetAllowanceId")
                        .HasColumnType("bigint");

                    b.HasKey("BeneficiaryId", "SubscriptionId");

                    b.HasIndex("BeneficiaryTypeId");

                    b.HasIndex("BudgetAllowanceId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionBeneficiaries");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Subscriptions.SubscriptionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("BeneficiaryTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubscriptionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiaryTypeId");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionTypes");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.TransactionLogs.TransactionLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BeneficiaryEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryID1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryID2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BeneficiaryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("BeneficiaryIsOffPlatform")
                        .HasColumnType("bit");

                    b.Property<string>("BeneficiaryLastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BeneficiaryTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CardProgramCardId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CashRegisterId")
                        .HasColumnType("bigint");

                    b.Property<string>("CashRegisterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Discriminator")
                        .HasColumnType("int");

                    b.Property<string>("FundTransferredFromCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FundTransferredFromProgramCardId")
                        .HasColumnType("bigint");

                    b.Property<bool>("InitiatedByOrganization")
                        .HasColumnType("bit");

                    b.Property<bool>("InitiatedByProject")
                        .HasColumnType("bit");

                    b.Property<long?>("MarketId")
                        .HasColumnType("bigint");

                    b.Property<string>("MarketName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SubscriptionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SubscriptionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionInitiatorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionInitiatorFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionInitiatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransactionInitiatorLastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionUniqueId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiaryId");

                    b.HasIndex("BeneficiaryTypeId");

                    b.HasIndex("MarketId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("TransactionInitiatorId");

                    b.HasIndex("TransactionUniqueId");

                    b.ToTable("TransactionLogs");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.TransactionLogs.TransactionLogProductGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TransactionLogId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("TransactionLogId");

                    b.ToTable("TransactionLogProductGroups");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.PaymentTransactionAddingFundTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AddingFundTransactionId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("PaymentTransactionId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AddingFundTransactionId");

                    b.HasIndex("PaymentTransactionId");

                    b.ToTable("PaymentTransactionAddingFundTransactions");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.PaymentTransactionProductGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("PaymentTransactionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductGroupId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTransactionId");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("PaymentTransactionProductGroups");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.RefundTransactionProductGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountRefunded")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("PaymentTransactionProductGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("RefundTransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTransactionProductGroupId");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("RefundTransactionId");

                    b.ToTable("RefundTransactionProductGroups");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("BeneficiaryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CardId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionUniqueId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiaryId");

                    b.HasIndex("CardId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Transactions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Transaction");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Beneficiaries.OffPlatformBeneficiary", b =>
                {
                    b.HasBaseType("Sig.App.Backend.DbModel.Entities.Beneficiaries.Beneficiary");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MonthlyPaymentMoment")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("OffPlatformBeneficiary");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.AddingFundTransaction", b =>
                {
                    b.HasBaseType("Sig.App.Backend.DbModel.Entities.Transactions.Transaction");

                    b.Property<decimal>("AvailableFund")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ExpireFundTransactionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductGroupId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasIndex("ExpireFundTransactionId")
                        .IsUnique()
                        .HasFilter("[ExpireFundTransactionId] IS NOT NULL");

                    b.HasIndex("ProductGroupId");

                    b.HasDiscriminator().HasValue("AddingFundTransaction");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.ExpireFundTransaction", b =>
                {
                    b.HasBaseType("Sig.App.Backend.DbModel.Entities.Transactions.Transaction");

                    b.Property<long>("AddingFundTransactionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ExpiredSubscriptionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductGroupId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint");

                    b.HasIndex("ExpiredSubscriptionId");

                    b.HasIndex("ProductGroupId");

                    b.HasDiscriminator().HasValue("ExpireFundTransaction");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.PaymentTransaction", b =>
                {
                    b.HasBaseType("Sig.App.Backend.DbModel.Entities.Transactions.Transaction");

                    b.Property<long?>("CashRegisterId")
                        .HasColumnType("bigint");

                    b.Property<bool>("InitiatedByOrganization")
                        .HasColumnType("bit");

                    b.Property<bool>("InitiatedByProject")
                        .HasColumnType("bit");

                    b.Property<long>("MarketId")
                        .HasColumnType("bigint");

                    b.HasIndex("CashRegisterId");

                    b.HasIndex("MarketId");

                    b.ToTable("Transactions", t =>
                        {
                            t.Property("CashRegisterId")
                                .HasColumnName("PaymentTransaction_CashRegisterId");

                            t.Property("InitiatedByOrganization")
                                .HasColumnName("PaymentTransaction_InitiatedByOrganization");

                            t.Property("InitiatedByProject")
                                .HasColumnName("PaymentTransaction_InitiatedByProject");
                        });

                    b.HasDiscriminator().HasValue("PaymentTransaction");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.RefundTransaction", b =>
                {
                    b.HasBaseType("Sig.App.Backend.DbModel.Entities.Transactions.Transaction");

                    b.Property<long?>("CashRegisterId")
                        .HasColumnType("bigint");

                    b.Property<long>("InitialTransactionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("InitiatedByOrganization")
                        .HasColumnType("bit");

                    b.Property<bool>("InitiatedByProject")
                        .HasColumnType("bit");

                    b.HasIndex("CashRegisterId");

                    b.HasIndex("InitialTransactionId");

                    b.HasDiscriminator().HasValue("RefundTransaction");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.LoyaltyAddingFundTransaction", b =>
                {
                    b.HasBaseType("Sig.App.Backend.DbModel.Entities.Transactions.AddingFundTransaction");

                    b.HasDiscriminator().HasValue("LoyaltyAddingFundTransaction");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.ManuallyAddingFundTransaction", b =>
                {
                    b.HasBaseType("Sig.App.Backend.DbModel.Entities.Transactions.AddingFundTransaction");

                    b.Property<long>("SubscriptionId")
                        .HasColumnType("bigint");

                    b.HasIndex("SubscriptionId");

                    b.HasDiscriminator().HasValue("ManuallyAddingFundTransaction");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.OffPlatformAddingFundTransaction", b =>
                {
                    b.HasBaseType("Sig.App.Backend.DbModel.Entities.Transactions.AddingFundTransaction");

                    b.HasDiscriminator().HasValue("OffPlatformAddingFundTransaction");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.SubscriptionAddingFundTransaction", b =>
                {
                    b.HasBaseType("Sig.App.Backend.DbModel.Entities.Transactions.AddingFundTransaction");

                    b.Property<long>("SubscriptionTypeId")
                        .HasColumnType("bigint");

                    b.HasIndex("SubscriptionTypeId");

                    b.HasDiscriminator().HasValue("SubscriptionAddingFundTransaction");
                });

            modelBuilder.Entity("AddingFundTransactionManuallyAddingFundTransaction", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Transactions.AddingFundTransaction", null)
                        .WithMany()
                        .HasForeignKey("AffectedNegativeFundTransactionsId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Sig.App.Backend.DbModel.Entities.Transactions.ManuallyAddingFundTransaction", null)
                        .WithMany()
                        .HasForeignKey("ManuallNegativeFundTransactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddingFundTransactionPaymentTransaction", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Transactions.AddingFundTransaction", null)
                        .WithMany()
                        .HasForeignKey("TransactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sig.App.Backend.DbModel.Entities.Transactions.PaymentTransaction", null)
                        .WithMany()
                        .HasForeignKey("TransactionsId1")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sig.App.Backend.DbModel.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Beneficiaries.Beneficiary", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Beneficiaries.BeneficiaryType", "BeneficiaryType")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("BeneficiaryTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Sig.App.Backend.DbModel.Entities.Cards.Card", "Card")
                        .WithOne("Beneficiary")
                        .HasForeignKey("Sig.App.Backend.DbModel.Entities.Beneficiaries.Beneficiary", "CardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sig.App.Backend.DbModel.Entities.Organizations.Organization", "Organization")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeneficiaryType");

                    b.Navigation("Card");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Beneficiaries.BeneficiaryType", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Projects.Project", "Project")
                        .WithMany("BeneficiaryTypes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Beneficiaries.PaymentFund", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Beneficiaries.OffPlatformBeneficiary", "Beneficiary")
                        .WithMany("PaymentFunds")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sig.App.Backend.DbModel.Entities.ProductGroups.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Beneficiary");

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.BudgetAllowances.BudgetAllowance", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Organizations.Organization", "Organization")
                        .WithMany("BudgetAllowances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sig.App.Backend.DbModel.Entities.Subscriptions.Subscription", "Subscription")
                        .WithMany("BudgetAllowances")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Cards.Card", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Projects.Project", "Project")
                        .WithMany("Cards")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Cards.Fund", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Cards.Card", "Card")
                        .WithMany("Funds")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sig.App.Backend.DbModel.Entities.ProductGroups.ProductGroup", "ProductGroup")
                        .WithMany("Funds")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.CashRegisters.CashRegister", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Markets.Market", "Market")
                        .WithMany("CashRegisters")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Market");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.CashRegisters.CashRegisterMarketGroup", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.CashRegisters.CashRegister", "CashRegister")
                        .WithMany("MarketGroups")
                        .HasForeignKey("CashRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sig.App.Backend.DbModel.Entities.MarketGroups.MarketGroup", "MarketGroup")
                        .WithMany("CashRegisters")
                        .HasForeignKey("MarketGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CashRegister");

                    b.Navigation("MarketGroup");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.MarketGroups.MarketGroup", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Projects.Project", "Project")
                        .WithMany("MarketGroups")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.MarketGroups.MarketGroupMarket", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.MarketGroups.MarketGroup", "MarketGroup")
                        .WithMany("Markets")
                        .HasForeignKey("MarketGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sig.App.Backend.DbModel.Entities.Markets.Market", "Market")
                        .WithMany("MarketGroups")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Market");

                    b.Navigation("MarketGroup");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Organizations.Organization", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Projects.Project", "Project")
                        .WithMany("Organizations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Organizations.OrganizationMarket", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Markets.Market", "Market")
                        .WithMany("Organizations")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sig.App.Backend.DbModel.Entities.Organizations.Organization", "Organization")
                        .WithMany("Markets")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Market");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.ProductGroups.ProductGroup", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Projects.Project", "Project")
                        .WithMany("ProductGroups")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Profiles.UserProfile", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.AppUser", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Sig.App.Backend.DbModel.Entities.Profiles.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Projects.ProjectMarket", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Markets.Market", "Market")
                        .WithMany("Projects")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sig.App.Backend.DbModel.Entities.Projects.Project", "Project")
                        .WithMany("Markets")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Market");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Subscriptions.Subscription", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Projects.Project", "Project")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Subscriptions.SubscriptionBeneficiary", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Beneficiaries.Beneficiary", "Beneficiary")
                        .WithMany("Subscriptions")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sig.App.Backend.DbModel.Entities.Beneficiaries.BeneficiaryType", "BeneficiaryType")
                        .WithMany()
                        .HasForeignKey("BeneficiaryTypeId");

                    b.HasOne("Sig.App.Backend.DbModel.Entities.BudgetAllowances.BudgetAllowance", "BudgetAllowance")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("BudgetAllowanceId");

                    b.HasOne("Sig.App.Backend.DbModel.Entities.Subscriptions.Subscription", "Subscription")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beneficiary");

                    b.Navigation("BeneficiaryType");

                    b.Navigation("BudgetAllowance");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Subscriptions.SubscriptionType", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Beneficiaries.BeneficiaryType", "BeneficiaryType")
                        .WithMany()
                        .HasForeignKey("BeneficiaryTypeId");

                    b.HasOne("Sig.App.Backend.DbModel.Entities.ProductGroups.ProductGroup", "ProductGroup")
                        .WithMany("Types")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sig.App.Backend.DbModel.Entities.Subscriptions.Subscription", "Subscription")
                        .WithMany("Types")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeneficiaryType");

                    b.Navigation("ProductGroup");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.TransactionLogs.TransactionLogProductGroup", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.TransactionLogs.TransactionLog", "TransactionLog")
                        .WithMany("TransactionLogProductGroups")
                        .HasForeignKey("TransactionLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionLog");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.PaymentTransactionAddingFundTransaction", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Transactions.AddingFundTransaction", "AddingFundTransaction")
                        .WithMany("PaymentTransactionAddingFundTransactions")
                        .HasForeignKey("AddingFundTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sig.App.Backend.DbModel.Entities.Transactions.PaymentTransaction", "PaymentTransaction")
                        .WithMany("PaymentTransactionAddingFundTransactions")
                        .HasForeignKey("PaymentTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AddingFundTransaction");

                    b.Navigation("PaymentTransaction");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.PaymentTransactionProductGroup", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Transactions.PaymentTransaction", "PaymentTransaction")
                        .WithMany("TransactionByProductGroups")
                        .HasForeignKey("PaymentTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sig.App.Backend.DbModel.Entities.ProductGroups.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentTransaction");

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.RefundTransactionProductGroup", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Transactions.PaymentTransactionProductGroup", "PaymentTransactionProductGroup")
                        .WithMany("RefundTransactionsProductGroup")
                        .HasForeignKey("PaymentTransactionProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sig.App.Backend.DbModel.Entities.ProductGroups.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sig.App.Backend.DbModel.Entities.Transactions.RefundTransaction", "RefundTransaction")
                        .WithMany("RefundByProductGroups")
                        .HasForeignKey("RefundTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PaymentTransactionProductGroup");

                    b.Navigation("ProductGroup");

                    b.Navigation("RefundTransaction");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.Transaction", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Beneficiaries.Beneficiary", "Beneficiary")
                        .WithMany()
                        .HasForeignKey("BeneficiaryId");

                    b.HasOne("Sig.App.Backend.DbModel.Entities.Cards.Card", "Card")
                        .WithMany("Transactions")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Sig.App.Backend.DbModel.Entities.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Beneficiary");

                    b.Navigation("Card");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.AddingFundTransaction", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Transactions.ExpireFundTransaction", "ExpireFundTransaction")
                        .WithOne("AddingFundTransaction")
                        .HasForeignKey("Sig.App.Backend.DbModel.Entities.Transactions.AddingFundTransaction", "ExpireFundTransactionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Sig.App.Backend.DbModel.Entities.ProductGroups.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ExpireFundTransaction");

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.ExpireFundTransaction", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Subscriptions.Subscription", "ExpiredSubscription")
                        .WithMany()
                        .HasForeignKey("ExpiredSubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sig.App.Backend.DbModel.Entities.ProductGroups.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ExpiredSubscription");

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.PaymentTransaction", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.CashRegisters.CashRegister", "CashRegister")
                        .WithMany()
                        .HasForeignKey("CashRegisterId");

                    b.HasOne("Sig.App.Backend.DbModel.Entities.Markets.Market", "Market")
                        .WithMany()
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CashRegister");

                    b.Navigation("Market");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.RefundTransaction", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.CashRegisters.CashRegister", "CashRegister")
                        .WithMany()
                        .HasForeignKey("CashRegisterId");

                    b.HasOne("Sig.App.Backend.DbModel.Entities.Transactions.PaymentTransaction", "InitialTransaction")
                        .WithMany("RefundTransactions")
                        .HasForeignKey("InitialTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CashRegister");

                    b.Navigation("InitialTransaction");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.ManuallyAddingFundTransaction", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Subscriptions.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.SubscriptionAddingFundTransaction", b =>
                {
                    b.HasOne("Sig.App.Backend.DbModel.Entities.Subscriptions.SubscriptionType", "SubscriptionType")
                        .WithMany()
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SubscriptionType");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.AppUser", b =>
                {
                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Beneficiaries.Beneficiary", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Beneficiaries.BeneficiaryType", b =>
                {
                    b.Navigation("Beneficiaries");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.BudgetAllowances.BudgetAllowance", b =>
                {
                    b.Navigation("Beneficiaries");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Cards.Card", b =>
                {
                    b.Navigation("Beneficiary");

                    b.Navigation("Funds");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.CashRegisters.CashRegister", b =>
                {
                    b.Navigation("MarketGroups");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.MarketGroups.MarketGroup", b =>
                {
                    b.Navigation("CashRegisters");

                    b.Navigation("Markets");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Markets.Market", b =>
                {
                    b.Navigation("CashRegisters");

                    b.Navigation("MarketGroups");

                    b.Navigation("Organizations");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Organizations.Organization", b =>
                {
                    b.Navigation("Beneficiaries");

                    b.Navigation("BudgetAllowances");

                    b.Navigation("Markets");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.ProductGroups.ProductGroup", b =>
                {
                    b.Navigation("Funds");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Projects.Project", b =>
                {
                    b.Navigation("BeneficiaryTypes");

                    b.Navigation("Cards");

                    b.Navigation("MarketGroups");

                    b.Navigation("Markets");

                    b.Navigation("Organizations");

                    b.Navigation("ProductGroups");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Subscriptions.Subscription", b =>
                {
                    b.Navigation("Beneficiaries");

                    b.Navigation("BudgetAllowances");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.TransactionLogs.TransactionLog", b =>
                {
                    b.Navigation("TransactionLogProductGroups");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.PaymentTransactionProductGroup", b =>
                {
                    b.Navigation("RefundTransactionsProductGroup");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Beneficiaries.OffPlatformBeneficiary", b =>
                {
                    b.Navigation("PaymentFunds");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.AddingFundTransaction", b =>
                {
                    b.Navigation("PaymentTransactionAddingFundTransactions");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.ExpireFundTransaction", b =>
                {
                    b.Navigation("AddingFundTransaction");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.PaymentTransaction", b =>
                {
                    b.Navigation("PaymentTransactionAddingFundTransactions");

                    b.Navigation("RefundTransactions");

                    b.Navigation("TransactionByProductGroups");
                });

            modelBuilder.Entity("Sig.App.Backend.DbModel.Entities.Transactions.RefundTransaction", b =>
                {
                    b.Navigation("RefundByProductGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
